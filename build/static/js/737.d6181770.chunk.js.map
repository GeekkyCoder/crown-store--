{"version":3,"file":"static/js/737.d6181770.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.tsx","components/form-input/form-input.styles.tsx","components/form-input/form-input.component.tsx","components/sign-up-form/sign-up-form.styles.tsx","components/sign-up-form/sign-up-form.component.tsx","components/sign-in-form/sign-in-form.styles.tsx","components/sign-in-form/sign-in-form.component.tsx","routes/authentication/authentication.styles.tsx","routes/authentication/authentication.component.tsx"],"sourcesContent":["import { FC, ButtonHTMLAttributes } from 'react';\r\n\r\nimport {\r\n  BaseButton,\r\n  GoogleSignInButton,\r\n  InvertedButton,\r\n  ButtonSpinner,\r\n} from './button.styles';\r\n\r\nexport enum BUTTON_TYPE_CLASSES {\r\n  base = 'base',\r\n  google = 'google-sign-in',\r\n  inverted = 'inverted',\r\n}\r\n\r\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base): typeof BaseButton =>\r\n  ({\r\n    [BUTTON_TYPE_CLASSES.base]: BaseButton,\r\n    [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\r\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\r\n  }[buttonType]);\r\n\r\nexport type ButtonProps = {\r\n  buttonType?: BUTTON_TYPE_CLASSES;\r\n  isLoading?: boolean;\r\n} & ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button: FC<ButtonProps> = ({\r\n  children,\r\n  buttonType,\r\n  isLoading,\r\n  ...otherProps\r\n}) => {\r\n  const CustomButton = getButton(buttonType);\r\n  return (\r\n    <CustomButton disabled={isLoading} {...otherProps}>\r\n      {isLoading ? <ButtonSpinner /> : children}\r\n    </CustomButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nimport { SpinnerContainer } from '../spinner/spinner.styles';\r\n\r\nexport const BaseButton = styled.button`\r\n  min-width: 165px;\r\n  width: auto;\r\n  height: 50px;\r\n  letter-spacing: 0.5px;\r\n  line-height: 50px;\r\n  padding: 0 35px 0 35px;\r\n  font-size: 15px;\r\n  background-color: black;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  font-family: 'Open Sans Condensed';\r\n  font-weight: bolder;\r\n  border: none;\r\n  cursor: pointer;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  &:hover {\r\n    background-color: white;\r\n    color: black;\r\n    border: 1px solid black;\r\n  }\r\n`;\r\n\r\nBaseButton.displayName = 'BaseButton';\r\n\r\nexport const GoogleSignInButton = styled(BaseButton)`\r\n  background-color: #4285f4;\r\n  color: white;\r\n\r\n  &:hover {\r\n    background-color: #357ae8;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nGoogleSignInButton.displayName = 'GoogleSignInButton';\r\n\r\nexport const InvertedButton = styled(BaseButton)`\r\n  background-color: white;\r\n  color: black;\r\n  border: 1px solid black;\r\n\r\n  &:hover {\r\n    background-color: black;\r\n    color: white;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nInvertedButton.displayName = 'InvertedButton';\r\n\r\nexport const ButtonSpinner = styled(SpinnerContainer)`\r\n  width: 30px;\r\n  height: 30px;\r\n`;\r\n\r\nButtonSpinner.displayName = 'ButtonSpinner';\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst subColor = 'grey';\r\nconst mainColor = 'black';\r\n\r\nconst shrinkLabelStyles = css`\r\n  top: -14px;\r\n  font-size: 12px;\r\n  color: ${mainColor};\r\n`;\r\n\r\ntype FormInputLabelProps = {\r\n  shrink?: boolean;\r\n};\r\n\r\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\r\n  color: ${subColor};\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  position: absolute;\r\n  pointer-events: none;\r\n  left: 5px;\r\n  top: 10px;\r\n  transition: 300ms ease all;\r\n  ${({ shrink }) => shrink && shrinkLabelStyles};\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  background: none;\r\n  background-color: white;\r\n  color: ${subColor};\r\n  font-size: 18px;\r\n  padding: 10px 10px 10px 5px;\r\n  display: block;\r\n  width: 100%;\r\n  border: none;\r\n  border-radius: 0;\r\n  border-bottom: 1px solid ${subColor};\r\n  margin: 25px 0;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &:focus ~ ${FormInputLabel} {\r\n    ${shrinkLabelStyles};\r\n  }\r\n`;\r\n\r\nexport const Group = styled.div`\r\n  position: relative;\r\n  margin: 45px 0;\r\n\r\n  input[type='password'] {\r\n    letter-spacing: 0.3em;\r\n  }\r\n`;\r\n","import { InputHTMLAttributes, FC } from 'react';\r\n\r\nimport { FormInputLabel, Input, Group } from './form-input.styles';\r\n\r\ntype FormInputProps = { label: string } & InputHTMLAttributes<HTMLInputElement>;\r\n\r\nconst FormInput: FC<FormInputProps> = ({ label, ...otherProps }) => {\r\n  return (\r\n    <Group>\r\n      <Input {...otherProps} />\r\n      {label && (\r\n        <FormInputLabel\r\n          shrink={Boolean(\r\n            otherProps.value &&\r\n              typeof otherProps.value === 'string' &&\r\n              otherProps.value.length\r\n          )}\r\n        >\r\n          {label}\r\n        </FormInputLabel>\r\n      )}\r\n    </Group>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import styled from 'styled-components';\r\n\r\nexport const SignUpContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 380px;\r\n\r\n  h2 {\r\n    margin: 10px 0;\r\n  }\r\n`;\r\n","import { useState, FormEvent, ChangeEvent } from 'react';\r\nimport { AuthError, AuthErrorCodes } from 'firebase/auth';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport FormInput from '../form-input/form-input.component';\r\nimport Button from '../button/button.component';\r\n\r\nimport { SignUpContainer } from './sign-up-form.styles';\r\nimport { signUpStart } from '../../store/user/user.action';\r\n\r\nconst defaultFormFields = {\r\n  displayName: '',\r\n  email: '',\r\n  password: '',\r\n  confirmPassword: '',\r\n};\r\n\r\nconst SignUpForm = () => {\r\n  const [formFields, setFormFields] = useState(defaultFormFields);\r\n  const { displayName, email, password, confirmPassword } = formFields;\r\n  const dispatch = useDispatch();\r\n\r\n  const resetFormFields = () => {\r\n    setFormFields(defaultFormFields);\r\n  };\r\n\r\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (password !== confirmPassword) {\r\n      alert('passwords do not match');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      dispatch(signUpStart(email, password, displayName));\r\n      resetFormFields();\r\n    } catch (error) {\r\n      if ((error as AuthError).code === AuthErrorCodes.EMAIL_EXISTS) {\r\n        alert('Cannot create user, email already in use');\r\n      } else {\r\n        console.log('user creation encountered an error', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormFields({ ...formFields, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <SignUpContainer>\r\n      <h2>Don't have an account?</h2>\r\n      <span>Sign up with your email and password</span>\r\n      <form onSubmit={handleSubmit}>\r\n        <FormInput\r\n          label='Display Name'\r\n          type='text'\r\n          required\r\n          onChange={handleChange}\r\n          name='displayName'\r\n          value={displayName}\r\n        />\r\n\r\n        <FormInput\r\n          label='Email'\r\n          type='email'\r\n          required\r\n          onChange={handleChange}\r\n          name='email'\r\n          value={email}\r\n        />\r\n\r\n        <FormInput\r\n          label='Password'\r\n          type='password'\r\n          required\r\n          onChange={handleChange}\r\n          name='password'\r\n          value={password}\r\n        />\r\n\r\n        <FormInput\r\n          label='Confirm Password'\r\n          type='password'\r\n          required\r\n          onChange={handleChange}\r\n          name='confirmPassword'\r\n          value={confirmPassword}\r\n        />\r\n        <Button type='submit'>Sign Up</Button>\r\n      </form>\r\n    </SignUpContainer>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;\r\n","import styled from 'styled-components';\r\n\r\nexport const SignInContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 380px;\r\n\r\n  h2 {\r\n    margin: 10px 0;\r\n  }\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n","import { useState, FormEvent, ChangeEvent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport FormInput from '../form-input/form-input.component';\r\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\r\n\r\nimport { SignInContainer, ButtonsContainer } from './sign-in-form.styles';\r\nimport {\r\n  googleSignInStart,\r\n  emailSignInStart,\r\n} from '../../store/user/user.action';\r\n\r\nconst defaultFormFields = {\r\n  email: '',\r\n  password: '',\r\n};\r\n\r\nconst SignInForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [formFields, setFormFields] = useState(defaultFormFields);\r\n  const { email, password } = formFields;\r\n\r\n  const resetFormFields = () => {\r\n    setFormFields(defaultFormFields);\r\n  };\r\n\r\n  const signInWithGoogle = async () => {\r\n    dispatch(googleSignInStart());\r\n  };\r\n\r\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      dispatch(emailSignInStart(email, password));\r\n      resetFormFields();\r\n    } catch (error) {\r\n      console.log('user sign in failed', error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormFields({ ...formFields, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <SignInContainer>\r\n      <h2>Already have an account?</h2>\r\n      <span>Sign in with your email and password</span>\r\n      <form onSubmit={handleSubmit}>\r\n        <FormInput\r\n          label='Email'\r\n          type='email'\r\n          required\r\n          onChange={handleChange}\r\n          name='email'\r\n          value={email}\r\n        />\r\n\r\n        <FormInput\r\n          label='Password'\r\n          type='password'\r\n          required\r\n          onChange={handleChange}\r\n          name='password'\r\n          value={password}\r\n        />\r\n        <ButtonsContainer>\r\n          <Button type='submit'>Sign In</Button>\r\n          <Button\r\n            buttonType={BUTTON_TYPE_CLASSES.google}\r\n            type='button'\r\n            onClick={signInWithGoogle}\r\n          >\r\n            Sign In With Google\r\n          </Button>\r\n        </ButtonsContainer>\r\n      </form>\r\n    </SignInContainer>\r\n  );\r\n};\r\n\r\nexport default SignInForm;\r\n","import styled from 'styled-components';\r\n\r\nexport const AuthenticationContainer = styled.div`\r\n  display: flex;\r\n  width: 900px;\r\n  justify-content: space-between;\r\n  margin: 30px auto;\r\n`;\r\n","import SignUpForm from '../../components/sign-up-form/sign-up-form.component';\r\nimport SignInForm from '../../components/sign-in-form/sign-in-form.component';\r\n\r\nimport { AuthenticationContainer } from './authentication.styles';\r\n\r\nconst Authentication = () => {\r\n  return (\r\n    <AuthenticationContainer>\r\n      <SignInForm />\r\n      <SignUpForm />\r\n    </AuthenticationContainer>\r\n  );\r\n};\r\n\r\nexport default Authentication;\r\n"],"names":["BUTTON_TYPE_CLASSES","_ref","children","buttonType","isLoading","otherProps","CustomButton","arguments","length","undefined","base","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","_jsx","disabled","ButtonSpinner","styled","_templateObject","_taggedTemplateLiteral","displayName","_templateObject2","_templateObject3","SpinnerContainer","_templateObject4","subColor","shrinkLabelStyles","css","FormInputLabel","shrink","Input","Group","label","_jsxs","Boolean","value","SignUpContainer","defaultFormFields","email","password","confirmPassword","SignUpForm","formFields","setFormFields","useState","dispatch","useDispatch","handleChange","event","name","target","onSubmit","async","preventDefault","signUpStart","error","code","AuthErrorCodes","alert","console","log","FormInput","type","required","onChange","Button","SignInContainer","ButtonsContainer","SignInForm","emailSignInStart","onClick","googleSignInStart","AuthenticationContainer","Authentication"],"sourceRoot":""}